name: Run API Evaluation

on:
  push:
    branches:
      - main
    paths:
      - 'RULER/**'
      - 'run-local.sh'
      - '.github/workflows/run-eval.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'RULER/**'
      - 'run-local.sh'
      - '.github/workflows/run-eval.yaml'
  workflow_dispatch:
  schedule:
    - cron: '17 1 * * 2'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  run-api-eval:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache conda
        uses: actions/cache@v3
        env:
          # increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('RULER/custom_requirements.txt') }}

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: ruler
          python-version: '3.11'
          channels: conda-forge,defaults
          channel-priority: strict
          auto-update-conda: true
          auto-activate-base: false
          # necessary for conda to work with the cache
          use-only-tar-bz2: true

      - name: Install dependencies
        working-directory: RULER
        run: |
          ./install_script.sh
          pip freeze

      - name: Get Available Model
        id: get_model
        env:
          MODEL_URL: ${{ vars.MODEL_URL }}
          MODEL_API_KEY: ${{ secrets.MODEL_API_KEY }}
        run: |
          echo "Fetching available models from $MODEL_URL/v1/models"
          RESPONSE=$(curl -s "$MODEL_URL/v1/models" -H "Authorization: Bearer $MODEL_API_KEY")
          echo "API Response: $RESPONSE"
          
          DATA_LENGTH=$(echo "$RESPONSE" | jq -r '.data | length')
          if [ "$DATA_LENGTH" = "null" ] || [ "$DATA_LENGTH" = "0" ]; then
            echo "Error: No models available in the data array"
            exit 1
          fi
          
          SELECTED_MODEL=$(echo "$RESPONSE" | jq -r '.data[0].id')
          
          if [ "$SELECTED_MODEL" = "null" ] || [ -z "$SELECTED_MODEL" ]; then
            echo "Error: Could not extract model ID from API response"
            exit 1
          fi
          
          echo "Selected model: $SELECTED_MODEL"
          echo "model_name=$SELECTED_MODEL" >> $GITHUB_OUTPUT

      - name: Run API evaluation script
        working-directory: RULER
        env:
          NUM_SAMPLES: 1
          MODEL_URL: ${{ vars.MODEL_URL }}
          MODEL_API_KEY: ${{ secrets.MODEL_API_KEY }}
          MODEL_NAME: ${{ steps.get_model.outputs.model_name }}
          CI: true
        run: |
          ./run_ruler.sh

      - name: Output result summary tables
        working-directory: RULER
        run: |
          ls -alh scripts/benchmark_root/${{ steps.get_model.outputs.model_name }}/synthetic/*/pred/*
          for csv_file in scripts/benchmark_root/${{ steps.get_model.outputs.model_name }}/synthetic/*/pred/summary*.csv; do
            if [ -f "$csv_file" ]; then
              echo "Found summary CSV file: $csv_file"
              # Print the file path as a header
              echo "**\`$csv_file\`**" >> $GITHUB_STEP_SUMMARY

              # convert CSV to markdown table
              {
                head -n1 "$csv_file" | sed 's/,/ | /g' | sed 's/^/| /' | sed 's/$/ |/';
                echo -n "| " && head -n1 "$csv_file" | sed 's/[^,]/-/g; s/,/ | /g' | sed 's/$/ |/';
                tail -n +2 "$csv_file" | sed 's/,/ | /g' | sed 's/^/| /' | sed 's/$/ |/';
              } >> $GITHUB_STEP_SUMMARY

              echo -e "\n" >> $GITHUB_STEP_SUMMARY
            fi
          done
